# Generated by Django 5.1.7 on 2025-05-14 11:18

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Module',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('telephone', models.CharField(blank=True, max_length=15, null=True)),
                ('adresse', models.TextField(blank=True, null=True)),
                ('role', models.CharField(choices=[('apprenant', 'Apprenant'), ('formateur', 'Formateur')], default='apprenant', max_length=20)),
                ('groups', models.ManyToManyField(blank=True, related_name='customuser_groups', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='customuser_permissions', to='auth.permission')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Formateur',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('adress', models.CharField(max_length=20)),
                ('telephone', models.CharField(max_length=20)),
                ('is_approved', models.BooleanField(default=False)),
                ('statut', models.BooleanField(default=False)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('module', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='inscription.module')),
            ],
        ),
        migrations.CreateModel(
            name='Cours',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titre', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('date_debut', models.DateField()),
                ('date_fin', models.DateField()),
                ('price', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('est_actif', models.BooleanField(default=True)),
                ('formateur', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='inscription.formateur')),
                ('module', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inscription.module')),
            ],
        ),
        migrations.CreateModel(
            name='Apprenant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('adress', models.CharField(max_length=20)),
                ('telephone', models.CharField(max_length=20)),
                ('is_approved', models.BooleanField(default=False)),
                ('statut', models.BooleanField(default=False)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('module', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='inscription.module')),
            ],
        ),
        migrations.CreateModel(
            name='Paiement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mode_paiement', models.CharField(choices=[('visa', 'Carte Visa/Mastercard'), ('lumicash', 'Lumicash'), ('orange_money', 'Orange Money'), ('mtn_momo', 'MTN Mobile Money')], max_length=20)),
                ('reference', models.CharField(max_length=100, unique=True)),
                ('montant', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0.01)])),
                ('numero_transaction', models.CharField(blank=True, max_length=100, null=True)),
                ('preuve', models.FileField(blank=True, null=True, upload_to='paiements/preuves/%Y/%m/%d/')),
                ('date_paiement', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_validation', models.DateTimeField(blank=True, null=True)),
                ('statut', models.CharField(choices=[('en_attente', 'En attente'), ('valide', 'Validé'), ('echec', 'Échec'), ('rembourse', 'Remboursé')], default='en_attente', max_length=20)),
                ('numero_carte', models.CharField(blank=True, max_length=20, null=True)),
                ('expiration_carte', models.CharField(blank=True, max_length=5, null=True)),
                ('cvv_carte', models.CharField(blank=True, max_length=4, null=True)),
                ('numero_mobile', models.CharField(blank=True, max_length=20, null=True)),
                ('operateur', models.CharField(blank=True, max_length=20, null=True)),
                ('facture_generee', models.BooleanField(default=False)),
                ('numero_facture', models.CharField(blank=True, max_length=20, unique=True)),
                ('date_echeance', models.DateField(blank=True, null=True)),
                ('cours', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='inscription.cours')),
                ('utilisateur', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='paiements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Paiement',
                'verbose_name_plural': 'Paiements',
                'ordering': ['-date_paiement'],
                'permissions': [('valider_paiement', 'Peut valider un paiement'), ('annuler_paiement', 'Peut annuler un paiement')],
            },
        ),
    ]
